use arrayfire::*;
use crate::FloatNum;

pub fn stream_2d(f: &Array<FloatNum>) -> Array<FloatNum> {
    let mut pdf = f.clone();
    eval!(pdf[1:1:0, 1:1:0, 1:1:1] = shift(&view!(f[1:1:0, 1:1:0, 1:1:1]), &[1, 0, 0, 0]));
    eval!(pdf[1:1:0, 1:1:0, 2:2:1] = shift(&view!(f[1:1:0, 1:1:0, 2:2:1]), &[0, 1, 0, 0]));
    eval!(pdf[1:1:0, 1:1:0, 3:3:1] = shift(&view!(f[1:1:0, 1:1:0, 3:3:1]), &[-1, 0, 0, 0]));
    eval!(pdf[1:1:0, 1:1:0, 4:4:1] = shift(&view!(f[1:1:0, 1:1:0, 4:4:1]), &[0, -1, 0, 0]));
    eval!(pdf[1:1:0, 1:1:0, 5:5:1] = shift(&view!(f[1:1:0, 1:1:0, 5:5:1]), &[1, 1, 0, 0]));
    eval!(pdf[1:1:0, 1:1:0, 6:6:1] = shift(&view!(f[1:1:0, 1:1:0, 6:6:1]), &[-1, 1, 0, 0]));
    eval!(pdf[1:1:0, 1:1:0, 7:7:1] = shift(&view!(f[1:1:0, 1:1:0, 7:7:1]), &[-1, -1, 0, 0]));
    eval!(pdf[1:1:0, 1:1:0, 8:8:1] = shift(&view!(f[1:1:0, 1:1:0, 8:8:1]), &[1, -1, 0, 0]));
    pdf
}

pub fn stream_3d(f: &Array<FloatNum>) -> Array<FloatNum> {
    let mut pdf = f.clone();
    // nearest-neighbours
    eval!(pdf[1:1:0, 1:1:0, 1:1:0, 1:1:1] = shift(&view!(f[1:1:0, 1:1:0, 1:1:0, 1:1:1]), &[ 1, 0, 0, 0]));
    eval!(pdf[1:1:0, 1:1:0, 1:1:0, 2:2:1] = shift(&view!(f[1:1:0, 1:1:0, 1:1:0, 2:2:1]), &[ -1, 0, 0, 0]));
    eval!(pdf[1:1:0, 1:1:0, 1:1:0, 3:3:1] = shift(&view!(f[1:1:0, 1:1:0, 1:1:0, 3:3:1]), &[ 0, 1, 0, 0]));
    eval!(pdf[1:1:0, 1:1:0, 1:1:0, 4:4:1] = shift(&view!(f[1:1:0, 1:1:0, 1:1:0, 4:4:1]), &[ 0, -1, 0, 0]));
    eval!(pdf[1:1:0, 1:1:0, 1:1:0, 5:5:1] = shift(&view!(f[1:1:0, 1:1:0, 1:1:0, 5:5:1]), &[ 0, 0, 1, 0]));
    eval!(pdf[1:1:0, 1:1:0, 1:1:0, 6:6:1] = shift(&view!(f[1:1:0, 1:1:0, 1:1:0, 6:6:1]), &[ 0, 0, -1, 0]));
    // next-nearest neighbours
    // xy plane
    eval!(pdf[1:1:0, 1:1:0, 1:1:0, 7:7:1] = shift(&view!(f[1:1:0, 1:1:0, 1:1:0, 7:7:1]), &[ 1, 1, 0, 0]));
    eval!(pdf[1:1:0, 1:1:0, 1:1:0, 8:8:1] = shift(&view!(f[1:1:0, 1:1:0, 1:1:0, 8:8:1]), &[ -1, 1, 0, 0]));
    eval!(pdf[1:1:0, 1:1:0, 1:1:0, 9:9:1] = shift(&view!(f[1:1:0, 1:1:0, 1:1:0, 9:9:1]), &[ 1, -1, 0, 0]));
    eval!(pdf[1:1:0, 1:1:0, 1:1:0, 10:10:1] = shift(&view!(f[1:1:0, 1:1:0, 1:1:0, 10:10:1]), &[ -1, -1, 0, 0]));
    // xz plane
    eval!(pdf[1:1:0, 1:1:0, 1:1:0, 11:11:1] = shift(&view!(f[1:1:0, 1:1:0, 1:1:0, 11:11:1]), &[ 1, 0, 1, 0]));
    eval!(pdf[1:1:0, 1:1:0, 1:1:0, 12:12:1] = shift(&view!(f[1:1:0, 1:1:0, 1:1:0, 12:12:1]), &[ -1, 0, 1, 0]));
    eval!(pdf[1:1:0, 1:1:0, 1:1:0, 13:13:1] = shift(&view!(f[1:1:0, 1:1:0, 1:1:0, 13:13:1]), &[ 1, 0, -1, 0]));
    eval!(pdf[1:1:0, 1:1:0, 1:1:0, 14:14:1] = shift(&view!(f[1:1:0, 1:1:0, 1:1:0, 14:14:1]), &[ -1, 0, -1, 0]));
    // yz plane
    eval!(pdf[1:1:0, 1:1:0, 1:1:0, 15:15:1] = shift(&view!(f[1:1:0, 1:1:0, 1:1:0, 15:15:1]), &[ 0, 1, 1, 0]));
    eval!(pdf[1:1:0, 1:1:0, 1:1:0, 16:16:1] = shift(&view!(f[1:1:0, 1:1:0, 1:1:0, 16:16:1]), &[ 0, -1, 1, 0]));
    eval!(pdf[1:1:0, 1:1:0, 1:1:0, 17:17:1] = shift(&view!(f[1:1:0, 1:1:0, 1:1:0, 17:17:1]), &[ 0, 1, -1, 0]));
    eval!(pdf[1:1:0, 1:1:0, 1:1:0, 18:18:1] = shift(&view!(f[1:1:0, 1:1:0, 1:1:0, 18:18:1]), &[ 0, -1, -1, 0]));
    // next next-nearest neighbours
    eval!(pdf[1:1:0, 1:1:0, 1:1:0, 19:19:1] = shift(&view!(f[1:1:0, 1:1:0, 1:1:0, 19:19:1]), &[ 1, 1, 1, 0]));
    eval!(pdf[1:1:0, 1:1:0, 1:1:0, 20:20:1] = shift(&view!(f[1:1:0, 1:1:0, 1:1:0, 20:20:1]), &[ -1, 1, 1, 0]));
    eval!(pdf[1:1:0, 1:1:0, 1:1:0, 21:21:1] = shift(&view!(f[1:1:0, 1:1:0, 1:1:0, 21:21:1]), &[ 1, -1, 1, 0]));
    eval!(pdf[1:1:0, 1:1:0, 1:1:0, 22:22:1] = shift(&view!(f[1:1:0, 1:1:0, 1:1:0, 22:22:1]), &[ -1, -1, 1, 0]));
    eval!(pdf[1:1:0, 1:1:0, 1:1:0, 23:23:1] = shift(&view!(f[1:1:0, 1:1:0, 1:1:0, 23:23:1]), &[ 1, 1, -1, 0]));
    eval!(pdf[1:1:0, 1:1:0, 1:1:0, 24:24:1] = shift(&view!(f[1:1:0, 1:1:0, 1:1:0, 24:24:1]), &[ -1, 1, -1, 0]));
    eval!(pdf[1:1:0, 1:1:0, 1:1:0, 25:25:1] = shift(&view!(f[1:1:0, 1:1:0, 1:1:0, 25:25:1]), &[ 1, -1, -1, 0]));
    eval!(pdf[1:1:0, 1:1:0, 1:1:0, 26:26:1] = shift(&view!(f[1:1:0, 1:1:0, 1:1:0, 26:26:1]), &[ -1, -1, -1, 0]));

    pdf
}